family_sizes <-
asylum::awaiting_decision
View(family_sizes)
family_sizes <-
asylum::awaiting_decision |>
group_by(Date, `Applicant type`)
family_sizes <-
asylum::awaiting_decision |>
group_by(Date, `Applicant type`) |>
summarise(Applications = sum(Applications))
family_sizes <-
asylum::awaiting_decision |>
group_by(Date, `Applicant type`) |>
summarise(Applications = sum(Applications)) |>
ungroup()
family_sizes <-
asylum::awaiting_decision |>
group_by(Date, `Applicant type`) |>
summarise(Applications = sum(Applications)) |>
ungroup() |>
pivot_wider(names_from = `Applicant type`, values_from = Applications)
family_sizes <-
asylum::awaiting_decision |>
group_by(Date, `Applicant type`) |>
summarise(Applications = sum(Applications)) |>
ungroup() |>
pivot_wider(names_from = `Applicant type`, values_from = Applications) |>
mutate(`Estimated family size` = (Dependant + `Main applicant`) / `Main applicant`)
# Calculate people at risk of destitution if the Home Office clears the legacy backlog, based on:
# 1. Size of current legacy backlog (main applicants)
# 2. Rough family size (so the projection will include dependents as well)
# 3. What proportion of people on the legacy backlog are likely to be in asylum accommodation
people_at_risk <- round(legacy_backlog * backlog_family_size * prop_backlog_receiving_support, 0)
# ---- Simple Fermi-style projections for destitution ----
# Current backlog of legacy cases (applications made before 28 June 2022) - from Home Office's latest IMA stats
# Source: https://www.gov.uk/government/statistics/statistics-relating-to-the-illegal-migration-bill
legacy_backlog <- 62157  # as of 30 July 2023; main applicants only
# Calculate people at risk of destitution if the Home Office clears the legacy backlog, based on:
# 1. Size of current legacy backlog (main applicants)
# 2. Rough family size (so the projection will include dependents as well)
# 3. What proportion of people on the legacy backlog are likely to be in asylum accommodation
people_at_risk <- round(legacy_backlog * backlog_family_size * prop_backlog_receiving_support, 0)
# What % of people were receiving asylum support as of Q2 2022
prop_backlog_receiving_support <-
support_and_backlog |>
filter(Date == ymd("2022-06-30")) |>
pull(`% receiving asylum support`)
# Calculate rough family size for claims still awaiting initial decisions
family_sizes <-
asylum::awaiting_decision |>
group_by(Date, `Applicant type`) |>
summarise(Applications = sum(Applications)) |>
ungroup() |>
pivot_wider(names_from = `Applicant type`, values_from = Applications) |>
mutate(`Estimated family size` = (Dependant + `Main applicant`) / `Main applicant`)
# Estimated family size based on people currently waiting for decisions
backlog_family_size <-
family_sizes |>
filter(Date == max(Date)) |>
pull(`Estimated family size`)
# Calculate people at risk of destitution if the Home Office clears the legacy backlog, based on:
# 1. Size of current legacy backlog (main applicants)
# 2. Rough family size (so the projection will include dependents as well)
# 3. What proportion of people on the legacy backlog are likely to be in asylum accommodation
people_at_risk <- round(legacy_backlog * backlog_family_size * prop_backlog_receiving_support, 0)
people_at_risk
# How many people might become destitute if Home Office continues making initial decisions on asylum cases
# at the current rate of 2,000 decisions per week (source: Sunday Times)
weeks_left_in_2023 <- 52 - isoweek(today())
people_at_risk_lo <- round(2000 * weeks_left_in_2023 * backlog_family_size * prop_backlog_receiving_support, 0)
people_at_risk_lo
# How much cash assistance needed? (£30 per person)
scales::comma(people_at_risk_lo * 30)
scales::comma(people_at_risk * 30)
receiving_support <-
asylum::support_received
View(receiving_support)
?receiving_support
unique(receiving_support$`Accommodation Type`)
unique(receiving_support$`Support Type`)
# How much cash assistance needed? (£30 per person)
scales::comma(people_at_risk_lo * 30)
scales::comma(people_at_risk * 30)
library(tidyverse)
library(demographr)
library(geographr)
library(compositr)
library(readODS)
library(readxl)
library(httr)
# England ----
## Homelessness ----
# Load live tables on homelessness
# Source: https://www.gov.uk/government/statistical-data-sets/live-tables-on-homelessness
GET(
"https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/1173277/Detailed_LA_202303.ods",
write_disk(tf <- tempfile(fileext = ".ods"))
)
england_homeless_raw <- read_ods(tf, sheet = "A1", skip = 6)
View(england_homeless_raw)
england_homeless <- england_homeless_raw[, c(1, 2, 15, 16)]
names(england_homeless) <- c("ltla21_code", "ltla21_name", "Households assessed as threatened with homelessness per (000s)", "Households assessed as homeless per (000s)")
View(england_homeless)
england_homeless <-
england_homeless |>
as_tibble() |>
filter(str_detect(ltla21_code, "^E0[6-9]")) |>
mutate(
`Households assessed as threatened with homelessness per (000s)` = as.numeric(`Households assessed as threatened with homelessness per (000s)`),
`Households assessed as homeless per (000s)` = as.numeric(`Households assessed as homeless per (000s)`)
)
## Temporary accommodation ----
england_temp_accomm_raw <- read_ods(tf, sheet = "TA1", skip = 6)
england_temp_accomm <- england_temp_accomm_raw[, c(1, 2, 7)]
names(england_temp_accomm) <- c("ltla21_code", "ltla21_name", "Total number of households in TA per (000s)")
View(england_temp_accomm)
# Keep only Local Authority Districts
england_temp_accomm <-
england_temp_accomm |>
as_tibble() |>
filter(str_detect(ltla21_code, "^E0[6-9]")) |>
mutate(`Households in temporary accommodation per 1,000` = as.numeric(`Total number of households in TA per (000s)`)) |>
select(ltla21_code, `Households in temporary accommodation per 1,000`)
## Housing stock and waiting list data ----
# Load LA housing statistics
# Source: https://www.gov.uk/government/collections/local-authority-housing-data // https://www.gov.uk/government/statistical-data-sets/local-authority-housing-statistics-data-returns-for-2021-to-2022
GET(
"https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/1166232/LAHS_21_22_accessible.ods",
write_disk(tf <- tempfile(fileext = ".ods"))
)
england_stock_waits <- read_ods(tf, sheet = "Local_Authority_Data", skip = 2)
View(england_stock_waits)
england_stock_waits <-
england_stock_waits |>
select(
ltla21_code = LA_Code,
# ltla21_name = organisation.name,
# Total number of households on the waiting list at 31 March
`Households on housing waiting list` = cc1a,
# Total number of vacant dwellings owned by any local authority
# (either your own or another local authority) within your district area at 31 March of the reporting year
`Vacant dwellings` = e1a,
# total_stock = a2ia,
# Total social rent stock
social_rent_stock = a2iaa,
# Total affordable rent stock
affordable_rent_stock = a2iab
)
england_stock_waits <-
england_stock_waits |>
select(
ltla21_code = LA_Code,
# ltla21_name = organisation.name,
# Total number of households on the waiting list at 31 March
`Households on housing waiting list` = cc1a,
# Total number of vacant dwellings owned by any local authority
# (either your own or another local authority) within your district area at 31 March of the reporting year
`Vacant dwellings` = e1a,
# total_stock = a2ia,
# Total social rent stock
social_rent_stock = a2iaa,
# Total affordable rent stock
affordable_rent_stock = a2iab
) |>
mutate(social_rent_stock = as.integer(social_rent_stock), affordable_rent_stock = as.integer(affordable_rent_stock)) |>
mutate(`Housing stock` = social_rent_stock + affordable_rent_stock) |>
select(-social_rent_stock, -affordable_rent_stock)
england_stock_waits <- read_ods(tf, sheet = "Local_Authority_Data", skip = 2)
# Keep relevant columns
# Definitions of column codes are from: https://www.gov.uk/government/publications/completing-local-authority-housing-statistics-2020-to-2021-guidance-notes-and-bulk-upload
england_stock_waits <-
england_stock_waits |>
select(
ltla21_code = LA_Code,
# ltla21_name = organisation.name,
# Total number of households on the waiting list at 31 March
`Households on housing waiting list` = cc1a,
# Total number of vacant dwellings owned by any local authority
# (either your own or another local authority) within your district area at 31 March of the reporting year
`Vacant dwellings` = e1a,
# total_stock = a2ia,
# Total social rent stock
social_rent_stock = a2iaa,
# Total affordable rent stock
affordable_rent_stock = a2iab
) |>
mutate(social_rent_stock = as.integer(social_rent_stock), affordable_rent_stock = as.integer(affordable_rent_stock)) |>
mutate(`Housing stock` = social_rent_stock + affordable_rent_stock) |>
select(-social_rent_stock, -affordable_rent_stock)
View(demographr::households21_ltla21)
install.packages("demographr")
install_github("humaniverse/demographr")
library(demographr)
View(households21_ltla21)
?households21_ltla21
england_stock_waits <-
england_stock_waits |>
left_join(demographr::households21_ltla21 |> select(-ltla21_name)) |>
mutate(
`Households on housing waiting list per 1,000` = `Households on housing waiting list` / households * 1000,
`Social housing stock as a proportion of all households` = `Housing stock` / households,
`Vacant dwellings per 1,000 units of social housing stock` = if_else(is.na(`Housing stock`) | `Housing stock` == 0, `Vacant dwellings`, `Vacant dwellings` / `Housing stock` * 1000)
)
england_stock_waits <-
england_stock_waits |>
left_join(demographr::households21_ltla21 |> select(-ltla21_name)) |>
mutate(
`Households on housing waiting list per 1,000` = `Households on housing waiting list` / households * 1000,
`Social housing stock as a proportion of all households` = `Housing stock` / households,
`Vacant dwellings per 1,000 units of social housing stock` = if_else(is.na(`Housing stock`) | `Housing stock` == 0, `Vacant dwellings`, `Vacant dwellings` / `Housing stock` * 1000)
) |>
select(
ltla21_code,
`Households on housing waiting list per 1,000`,
`Social housing stock as a proportion of all households`,
`Vacant dwellings per 1,000 units of social housing stock`
)
england_stock_waits <-
england_stock_waits |>
left_join(demographr::households21_ltla21 |> select(-ltla21_name)) |>
mutate(
`Households on housing waiting list per 1,000` = `Households on housing waiting list` / households * 1000,
`Social housing stock as a proportion of all households` = `Housing stock` / households,
`Vacant dwellings per 1,000 units of social housing stock` = if_else(is.na(`Housing stock`) | `Housing stock` == 0, `Vacant dwellings`, `Vacant dwellings` / `Housing stock` * 1000)
)
# Keep relevant columns
# Definitions of column codes are from: https://www.gov.uk/government/publications/completing-local-authority-housing-statistics-2020-to-2021-guidance-notes-and-bulk-upload
england_stock_waits <-
england_stock_waits |>
select(
ltla21_code = LA_Code,
# ltla21_name = organisation.name,
# Total number of households on the waiting list at 31 March
`Households on housing waiting list` = cc1a,
# Total number of vacant dwellings owned by any local authority
# (either your own or another local authority) within your district area at 31 March of the reporting year
`Vacant dwellings` = e1a,
# total_stock = a2ia,
# Total social rent stock
social_rent_stock = a2iaa,
# Total affordable rent stock
affordable_rent_stock = a2iab
) |>
mutate(social_rent_stock = as.integer(social_rent_stock), affordable_rent_stock = as.integer(affordable_rent_stock)) |>
mutate(`Housing stock` = social_rent_stock + affordable_rent_stock) |>
select(-social_rent_stock, -affordable_rent_stock)
england_stock_waits <-
england_stock_waits |>
left_join(demographr::households21_ltla21 |> select(-ltla21_name)) |>
mutate(
`Households on housing waiting list per 1,000` = `Households on housing waiting list` / households * 1000,
`Social housing stock as a proportion of all households` = `Housing stock` / households,
`Vacant dwellings per 1,000 units of social housing stock` = if_else(is.na(`Housing stock`) | `Housing stock` == 0, `Vacant dwellings`, `Vacant dwellings` / `Housing stock` * 1000)
)
england_stock_waits <- read_ods(tf, sheet = "Local_Authority_Data", skip = 2)
# Keep relevant columns
# Definitions of column codes are from: https://www.gov.uk/government/publications/completing-local-authority-housing-statistics-2020-to-2021-guidance-notes-and-bulk-upload
england_stock_waits <-
england_stock_waits |>
select(
ltla21_code = LA_Code,
# ltla21_name = organisation.name,
# Total number of households on the waiting list at 31 March
`Households on housing waiting list` = cc1a,
# Total number of vacant dwellings owned by any local authority
# (either your own or another local authority) within your district area at 31 March of the reporting year
`Vacant dwellings` = e1a,
# total_stock = a2ia,
# Total social rent stock
social_rent_stock = a2iaa,
# Total affordable rent stock
affordable_rent_stock = a2iab
) |>
mutate(social_rent_stock = as.integer(social_rent_stock), affordable_rent_stock = as.integer(affordable_rent_stock)) |>
mutate(`Housing stock` = social_rent_stock + affordable_rent_stock) |>
select(-social_rent_stock, -affordable_rent_stock)
england_stock_waits <-
england_stock_waits |>
left_join(demographr::households21_ltla21 |> select(-ltla21_name)) |>
mutate(
`Households on housing waiting list per 1,000` = `Households on housing waiting list` / households * 1000,
`Social housing stock as a proportion of all households` = `Housing stock` / households,
`Vacant dwellings per 1,000 units of social housing stock` = if_else(is.na(`Housing stock`) | `Housing stock` == 0, `Vacant dwellings`, `Vacant dwellings` / `Housing stock` * 1000)
)
england_stock_waits <-
england_stock_waits |>
left_join(demographr::households21_ltla21 |> select(-ltla21_name)) |>
mutate(
`Households on housing waiting list per 1,000` = `Households on housing waiting list` / households * 1000,
`Social housing stock as a proportion of all households` = `Housing stock` / households,
`Vacant dwellings per 1,000 units of social housing stock` = if_else(is.na(`Housing stock`) | `Housing stock` == 0, `Vacant dwellings`, `Vacant dwellings` / `Housing stock` * 1000)
) |>
select(
ltla21_code,
`Households on housing waiting list per 1,000`,
`Social housing stock as a proportion of all households`,
`Vacant dwellings per 1,000 units of social housing stock`
)
england <-
england_homeless |>
left_join(england_temp_accomm) |>
left_join(england_stock_waits)
View(england)
england <-
england_homeless |>
left_join(england_temp_accomm) |>
left_join(england_stock_waits) |>
mutate(
stock_quintile = as.integer(Hmisc::cut2(`Social housing stock as a proportion of all households`, g = 5)),
waiting_quintile = as.integer(Hmisc::cut2(`Households on housing waiting list per 1,000`, g = 5)),
homeless_quintile = as.integer(Hmisc::cut2(`Households assessed as threatened with homelessness per (000s)`, g = 5)),
temp_accom_quintile = as.integer(Hmisc::cut2(`Households in temporary accommodation per 1,000`, g = 5)),
vacancies_quintile = as.integer(Hmisc::cut2(`Vacant dwellings per 1,000 units of social housing stock`, g = 5))
)
# Scotland ----
# Download latest homelessness data
# Source: https://www.gov.scot/publications/homelessness-in-scotland-2022-23/documents/
tf <- download_file("https://www.gov.scot/binaries/content/documents/govscot/publications/statistics/2023/08/homelessness-in-scotland-2022-23/documents/main-tables_homelessness-in-scotland-2022-23/main-tables_homelessness-in-scotland-2022-23/govscot%3Adocument/Main%2Btables_Homelessness%2Bin%2BScotland%2B2022-23.xlsx", ".xlsx")
## Local Authority names and codes ----
scottish_ltla_names_codes <-
geographr::boundaries_ltla21 |>
sf::st_drop_geometry() |>
filter(str_detect(ltla21_code, "^S")) |>
# Match to LA names in the homelessness data
mutate(ltla21_name = str_replace(ltla21_name, " and ", " & ")) |>
mutate(
ltla21_name = case_match(
ltla21_name,
"Na h-Eileanan Siar" ~ "Eilean Siar",
"City of Edinburgh" ~ "Edinburgh",
"Shetland Islands" ~ "Shetland",
.default = ltla21_name
)
)
## Household estimates ----
# Source: https://statistics.gov.scot/resource?uri=http%3A%2F%2Fstatistics.gov.scot%2Fdata%2Fhousehold-estimates
scotland_households <- read_csv("https://statistics.gov.scot/slice/observations.csv?&dataset=http%3A%2F%2Fstatistics.gov.scot%2Fdata%2Fhousehold-estimates&http%3A%2F%2Fpurl.org%2Flinked-data%2Fcube%23measureType=http%3A%2F%2Fstatistics.gov.scot%2Fdef%2Fmeasure-properties%2Fcount&http%3A%2F%2Fpurl.org%2Flinked-data%2Fsdmx%2F2009%2Fdimension%23refPeriod=http%3A%2F%2Freference.data.gov.uk%2Fid%2Fyear%2F2021", skip = 7)
scotland_households <-
scotland_households |>
mutate(ltla21_code = str_extract(`http://purl.org/linked-data/sdmx/2009/dimension#refArea`, "S[0-9]+")) |>
filter(str_detect(ltla21_code, "^S12")) |>
select(
ltla21_code,
`Number of households` = `Which Are Occupied`
)
# Homelessness applications by local authority
scotland_homelessness <- read_excel(tf, sheet = "T1", range = "A6:F39")
scotland_homelessness <-
scotland_homelessness |>
select(ltla21_name = `Local Authority`, applications = `2022-23`) |>
filter(ltla21_name != "Scotland") |>
left_join(scottish_ltla_names_codes) |>
# Calculate rate
left_join(scotland_households) |>
mutate(`Assessed as homeless or threatened with homelessness per 1,000` = applications / `Number of households` * 1000) |>
select(ltla21_code, `Assessed as homeless or threatened with homelessness per 1,000`)
# Scotland ----
# Download latest homelessness data
# Source: https://www.gov.scot/publications/homelessness-in-scotland-2022-23/documents/
tf <- download_file("https://www.gov.scot/binaries/content/documents/govscot/publications/statistics/2023/08/homelessness-in-scotland-2022-23/documents/main-tables_homelessness-in-scotland-2022-23/main-tables_homelessness-in-scotland-2022-23/govscot%3Adocument/Main%2Btables_Homelessness%2Bin%2BScotland%2B2022-23.xlsx", ".xlsx")
## Local Authority names and codes ----
scottish_ltla_names_codes <-
geographr::boundaries_ltla21 |>
sf::st_drop_geometry() |>
filter(str_detect(ltla21_code, "^S")) |>
# Match to LA names in the homelessness data
mutate(ltla21_name = str_replace(ltla21_name, " and ", " & ")) |>
mutate(
ltla21_name = case_match(
ltla21_name,
"Na h-Eileanan Siar" ~ "Eilean Siar",
"City of Edinburgh" ~ "Edinburgh",
"Shetland Islands" ~ "Shetland",
.default = ltla21_name
)
)
## Household estimates ----
# Source: https://statistics.gov.scot/resource?uri=http%3A%2F%2Fstatistics.gov.scot%2Fdata%2Fhousehold-estimates
scotland_households <- read_csv("https://statistics.gov.scot/slice/observations.csv?&dataset=http%3A%2F%2Fstatistics.gov.scot%2Fdata%2Fhousehold-estimates&http%3A%2F%2Fpurl.org%2Flinked-data%2Fcube%23measureType=http%3A%2F%2Fstatistics.gov.scot%2Fdef%2Fmeasure-properties%2Fcount&http%3A%2F%2Fpurl.org%2Flinked-data%2Fsdmx%2F2009%2Fdimension%23refPeriod=http%3A%2F%2Freference.data.gov.uk%2Fid%2Fyear%2F2021", skip = 7)
scotland_households <-
scotland_households |>
mutate(ltla21_code = str_extract(`http://purl.org/linked-data/sdmx/2009/dimension#refArea`, "S[0-9]+")) |>
filter(str_detect(ltla21_code, "^S12")) |>
select(
ltla21_code,
`Number of households` = `Which Are Occupied`
)
# Homelessness applications by local authority
scotland_homelessness <- read_excel(tf, sheet = "T1", range = "A6:F39")
scotland_homelessness <-
scotland_homelessness |>
select(ltla21_name = `Local Authority`, applications = `2022-23`) |>
filter(ltla21_name != "Scotland") |>
left_join(scottish_ltla_names_codes) |>
# Calculate rate
left_join(scotland_households) |>
mutate(`Assessed as homeless or threatened with homelessness per 1,000` = applications / `Number of households` * 1000) |>
select(ltla21_code, `Assessed as homeless or threatened with homelessness per 1,000`)
## Temporary accommodation ----
# Source: https://statistics.gov.scot/resource?uri=http%3A%2F%2Fstatistics.gov.scot%2Fdata%2Ftemporary-accommodation-statistics
scotland_temp_accom <- read_csv("https://statistics.gov.scot/downloads/cube-table?uri=http%3A%2F%2Fstatistics.gov.scot%2Fdata%2Ftemporary-accommodation-statistics")
scotland_temp_accom <-
scotland_temp_accom |>
filter(DateCode == max(DateCode) & FeatureType == "Council Area") |>
select(
ltla21_code = FeatureCode,
`Households in temporary accommodation` = Value
) |>
# Calculate rate per 1000 households
left_join(scotland_households) |>
mutate(`Households in temporary accommodation per 1,000` = `Households in temporary accommodation` / `Number of households` * 1000) |>
select(ltla21_code, `Households in temporary accommodation per 1,000`)
library(tidyverse)
library(demographr)
library(geographr)
library(compositr)
library(readODS)
library(readxl)
library(httr)
# England ----
## Homelessness ----
# Load live tables on homelessness
# Source: https://www.gov.uk/government/statistical-data-sets/live-tables-on-homelessness
GET(
"https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/1173277/Detailed_LA_202303.ods",
write_disk(tf <- tempfile(fileext = ".ods"))
)
england_homeless_raw <- read_ods(tf, sheet = "A1", skip = 6)
england_homeless <- england_homeless_raw[, c(1, 2, 15, 16)]
names(england_homeless) <- c("ltla21_code", "ltla21_name", "Households assessed as threatened with homelessness per (000s)", "Households assessed as homeless per (000s)")
# Keep only Local Authority Districts
england_homeless <-
england_homeless |>
as_tibble() |>
filter(str_detect(ltla21_code, "^E0[6-9]")) |>
mutate(
`Households assessed as threatened with homelessness per (000s)` = as.numeric(`Households assessed as threatened with homelessness per (000s)`),
`Households assessed as homeless per (000s)` = as.numeric(`Households assessed as homeless per (000s)`)
)
## Temporary accommodation ----
england_temp_accomm_raw <- read_ods(tf, sheet = "TA1", skip = 6)
england_temp_accomm <- england_temp_accomm_raw[, c(1, 2, 7)]
names(england_temp_accomm) <- c("ltla21_code", "ltla21_name", "Total number of households in TA per (000s)")
# Keep only Local Authority Districts
england_temp_accomm <-
england_temp_accomm |>
as_tibble() |>
filter(str_detect(ltla21_code, "^E0[6-9]")) |>
mutate(`Households in temporary accommodation per 1,000` = as.numeric(`Total number of households in TA per (000s)`)) |>
select(ltla21_code, `Households in temporary accommodation per 1,000`)
## Housing stock and waiting list data ----
# Load LA housing statistics
# Source: https://www.gov.uk/government/collections/local-authority-housing-data // https://www.gov.uk/government/statistical-data-sets/local-authority-housing-statistics-data-returns-for-2021-to-2022
GET(
"https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/1166232/LAHS_21_22_accessible.ods",
write_disk(tf <- tempfile(fileext = ".ods"))
)
england_stock_waits <- read_ods(tf, sheet = "Local_Authority_Data", skip = 2)
# Keep relevant columns
# Definitions of column codes are from: https://www.gov.uk/government/publications/completing-local-authority-housing-statistics-2020-to-2021-guidance-notes-and-bulk-upload
england_stock_waits <-
england_stock_waits |>
select(
ltla21_code = LA_Code,
# ltla21_name = organisation.name,
# Total number of households on the waiting list at 31 March
`Households on housing waiting list` = cc1a,
# Total number of vacant dwellings owned by any local authority
# (either your own or another local authority) within your district area at 31 March of the reporting year
`Vacant dwellings` = e1a,
# total_stock = a2ia,
# Total social rent stock
social_rent_stock = a2iaa,
# Total affordable rent stock
affordable_rent_stock = a2iab
) |>
mutate(social_rent_stock = as.integer(social_rent_stock), affordable_rent_stock = as.integer(affordable_rent_stock)) |>
mutate(`Housing stock` = social_rent_stock + affordable_rent_stock) |>
select(-social_rent_stock, -affordable_rent_stock)
# Calculate rates
england_stock_waits <-
england_stock_waits |>
left_join(demographr::households21_ltla21 |> select(-ltla21_name)) |>
mutate(
`Households on housing waiting list per 1,000` = `Households on housing waiting list` / households * 1000,
`Social housing stock as a proportion of all households` = `Housing stock` / households,
`Vacant dwellings per 1,000 units of social housing stock` = if_else(is.na(`Housing stock`) | `Housing stock` == 0, `Vacant dwellings`, `Vacant dwellings` / `Housing stock` * 1000)
) |>
select(
ltla21_code,
`Households on housing waiting list per 1,000`,
`Social housing stock as a proportion of all households`,
`Vacant dwellings per 1,000 units of social housing stock`
)
## Combine datasets and calculate deciles ----
england <-
england_homeless |>
left_join(england_temp_accomm) |>
left_join(england_stock_waits) |>
mutate(
stock_quintile = as.integer(Hmisc::cut2(`Social housing stock as a proportion of all households`, g = 5)),
waiting_quintile = as.integer(Hmisc::cut2(`Households on housing waiting list per 1,000`, g = 5)),
homeless_quintile = as.integer(Hmisc::cut2(`Households assessed as threatened with homelessness per (000s)`, g = 5)),
temp_accom_quintile = as.integer(Hmisc::cut2(`Households in temporary accommodation per 1,000`, g = 5)),
vacancies_quintile = as.integer(Hmisc::cut2(`Vacant dwellings per 1,000 units of social housing stock`, g = 5))
)
# Save
write_csv(england, "data/housing/housing-england.csv")
# Scotland ----
# Download latest homelessness data
# Source: https://www.gov.scot/publications/homelessness-in-scotland-2022-23/documents/
tf <- download_file("https://www.gov.scot/binaries/content/documents/govscot/publications/statistics/2023/08/homelessness-in-scotland-2022-23/documents/main-tables_homelessness-in-scotland-2022-23/main-tables_homelessness-in-scotland-2022-23/govscot%3Adocument/Main%2Btables_Homelessness%2Bin%2BScotland%2B2022-23.xlsx", ".xlsx")
